name: API tests
permissions:
  contents: read
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 11 * * 1' # run "At 11:00 on Monday"

jobs:
  # Run code tests before building the image, to ensure it is good to go
  unit-tests:
    name: Run code tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.12'] # Using a list so it's extensible for future use
    services:
      # label used to access the service container
      postgres:
        # dockerhub image
        image: postgres
        # provide the login and db deets for postgres
        env:
          POSTGRES_DB: poptape_aws_test
          POSTGRES_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
          POSTGRES_USER: poptape_aws_test
        ports:
          # maps tcp port 5432 on service container to the host
          - 5432:5432
        # set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:

      - name: Install postgres client
        run: |
          sudo apt-get update && sudo apt-get install --yes --no-install-recommends postgresql-client

      - uses: actions/checkout@v4
      - name: Setting up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Create DB tables
        run: |
          pwd
          psql -h localhost -U poptape_aws_test password=${{ secrets.TEST_DB_PASSWORD }} -f db_schema/poptape_aws_db_schema.sql
          psql -h localhost -U poptape_aws_test password=${{ secrets.TEST_DB_PASSWORD }} -c '\dt'

      - name: Test with pytest
        run: |
          touch poptape_aws.log
          export AWS_ACCESS_KEY_ID='testing'
          export AWS_SECRET_ACCESS_KEY='testing'
          export AWS_SECURITY_TOKEN='testing'
          export AWS_SESSION_TOKEN='testing'
          export AWS_DEFAULT_REGION='us-east-1'
          export AWS_ACCOUNT_ID='123456789012'
          export FERNET_KEY='90gFHJotmwCTIzjwvciZ2XuQwGGqtNsZwXVv6TB7LhE='
          coverage run -m --omit="*/test*" pytest -v --junitxml=junit.xml --html=report.html
          coverage xml          
          echo "$(coverage report -m )"
          covRes="$(coverage report -m --fail-under=40)"
          echo "$covRes"